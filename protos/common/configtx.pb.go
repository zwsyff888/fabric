// Code generated by protoc-gen-go.
// source: common/configtx.proto
// DO NOT EDIT!

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConfigurationItem_ConfigurationType int32

const (
	ConfigurationItem_Policy  ConfigurationItem_ConfigurationType = 0
	ConfigurationItem_Chain   ConfigurationItem_ConfigurationType = 1
	ConfigurationItem_Orderer ConfigurationItem_ConfigurationType = 2
	ConfigurationItem_Peer    ConfigurationItem_ConfigurationType = 3
	ConfigurationItem_MSP     ConfigurationItem_ConfigurationType = 4
)

var ConfigurationItem_ConfigurationType_name = map[int32]string{
	0: "Policy",
	1: "Chain",
	2: "Orderer",
	3: "Peer",
	4: "MSP",
}
var ConfigurationItem_ConfigurationType_value = map[string]int32{
	"Policy":  0,
	"Chain":   1,
	"Orderer": 2,
	"Peer":    3,
	"MSP":     4,
}

func (x ConfigurationItem_ConfigurationType) String() string {
	return proto.EnumName(ConfigurationItem_ConfigurationType_name, int32(x))
}
func (ConfigurationItem_ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0}
}

// ConfigurationEnvelope is designed to contain _all_ configuration for a chain with no dependency
// on previous configuration transactions.
//
// It is generated with the following scheme:
//   1. Retrieve the existing configuration
//   2. Note the highest configuration sequence number, store it and increment it by one
//   3. Modify desired ConfigurationItems, setting each LastModified to the stored and incremented sequence number
//     a) Note that the ConfigurationItem has a ChainHeader header attached to it, who's type is set to CONFIGURATION_ITEM
//   4. Update SignedConfigurationItem with appropriate signatures over the modified ConfigurationItem
//     a) Each signature is of type ConfigurationSignature
//     b) The ConfigurationSignature signature is over the concatenation of signatureHeader and the ConfigurationItem bytes (which includes a ChainHeader)
//   5. Submit new Configuration for ordering in Envelope signed by submitter
//     a) The Envelope Payload has data set to the marshaled ConfigurationEnvelope
//     b) The Envelope Payload has a header of type Header.Type.CONFIGURATION_TRANSACTION
//
// The configuration manager will verify:
//   1. All configuration items and the envelope refer to the correct chain
//   2. Some configuration item has been added or modified
//   3. No existing configuration item has been ommitted
//   4. All configuration changes have a LastModification of one more than the last configuration's highest LastModification number
//   5. All configuration changes satisfy the corresponding modification policy
type ConfigurationEnvelope struct {
	Items []*SignedConfigurationItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
}

func (m *ConfigurationEnvelope) Reset()                    { *m = ConfigurationEnvelope{} }
func (m *ConfigurationEnvelope) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationEnvelope) ProtoMessage()               {}
func (*ConfigurationEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ConfigurationEnvelope) GetItems() []*SignedConfigurationItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// ConfigurationTemplate is used as a serialization format to share configuration templates
// The orderer supplies a configuration template to the user to use when constructing a new
// chain creation transaction, so this is used to facilitate that.
type ConfigurationTemplate struct {
	Items []*ConfigurationItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
}

func (m *ConfigurationTemplate) Reset()                    { *m = ConfigurationTemplate{} }
func (m *ConfigurationTemplate) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationTemplate) ProtoMessage()               {}
func (*ConfigurationTemplate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ConfigurationTemplate) GetItems() []*ConfigurationItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// This message may change slightly depending on the finalization of signature schemes for transactions
type SignedConfigurationItem struct {
	ConfigurationItem []byte                    `protobuf:"bytes,1,opt,name=ConfigurationItem,proto3" json:"ConfigurationItem,omitempty"`
	Signatures        []*ConfigurationSignature `protobuf:"bytes,2,rep,name=Signatures" json:"Signatures,omitempty"`
}

func (m *SignedConfigurationItem) Reset()                    { *m = SignedConfigurationItem{} }
func (m *SignedConfigurationItem) String() string            { return proto.CompactTextString(m) }
func (*SignedConfigurationItem) ProtoMessage()               {}
func (*SignedConfigurationItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SignedConfigurationItem) GetSignatures() []*ConfigurationSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type ConfigurationItem struct {
	Header             *ChainHeader                        `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Type               ConfigurationItem_ConfigurationType `protobuf:"varint,2,opt,name=Type,enum=common.ConfigurationItem_ConfigurationType" json:"Type,omitempty"`
	LastModified       uint64                              `protobuf:"varint,3,opt,name=LastModified" json:"LastModified,omitempty"`
	ModificationPolicy string                              `protobuf:"bytes,4,opt,name=ModificationPolicy" json:"ModificationPolicy,omitempty"`
	Key                string                              `protobuf:"bytes,5,opt,name=Key" json:"Key,omitempty"`
	Value              []byte                              `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *ConfigurationItem) Reset()                    { *m = ConfigurationItem{} }
func (m *ConfigurationItem) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationItem) ProtoMessage()               {}
func (*ConfigurationItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ConfigurationItem) GetHeader() *ChainHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type ConfigurationSignature struct {
	SignatureHeader []byte `protobuf:"bytes,1,opt,name=signatureHeader,proto3" json:"signatureHeader,omitempty"`
	Signature       []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ConfigurationSignature) Reset()                    { *m = ConfigurationSignature{} }
func (m *ConfigurationSignature) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationSignature) ProtoMessage()               {}
func (*ConfigurationSignature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*ConfigurationEnvelope)(nil), "common.ConfigurationEnvelope")
	proto.RegisterType((*ConfigurationTemplate)(nil), "common.ConfigurationTemplate")
	proto.RegisterType((*SignedConfigurationItem)(nil), "common.SignedConfigurationItem")
	proto.RegisterType((*ConfigurationItem)(nil), "common.ConfigurationItem")
	proto.RegisterType((*ConfigurationSignature)(nil), "common.ConfigurationSignature")
	proto.RegisterEnum("common.ConfigurationItem_ConfigurationType", ConfigurationItem_ConfigurationType_name, ConfigurationItem_ConfigurationType_value)
}

func init() { proto.RegisterFile("common/configtx.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xb6, 0xb4, 0x74, 0xe5, 0x40, 0xb4, 0x9e, 0x75, 0x75, 0x34, 0x46, 0x9b, 0x5e, 0x35, 0x41,
	0x69, 0x82, 0xf1, 0x56, 0x13, 0x8d, 0xc9, 0xfa, 0xb3, 0x4a, 0x66, 0x37, 0x5e, 0x78, 0xe5, 0xd0,
	0x1e, 0x60, 0x92, 0xd2, 0x69, 0xa6, 0x83, 0x91, 0x27, 0xf0, 0xd9, 0x7c, 0x2b, 0xd3, 0x29, 0xcb,
	0x2e, 0x50, 0xae, 0x3a, 0xf3, 0x9d, 0xef, 0xa7, 0xe7, 0x4b, 0x0b, 0x67, 0xa9, 0x5a, 0x2e, 0x55,
	0x91, 0xa4, 0xaa, 0x98, 0xc9, 0xb9, 0xf9, 0x33, 0x2a, 0xb5, 0x32, 0x0a, 0xfd, 0x06, 0x7e, 0x7a,
	0xba, 0x1d, 0xd7, 0x8f, 0x66, 0x18, 0x7d, 0x83, 0xb3, 0x0f, 0x96, 0xbe, 0xd2, 0xc2, 0x48, 0x55,
	0x7c, 0x2c, 0x7e, 0x53, 0xae, 0x4a, 0xc2, 0x37, 0xd0, 0xfd, 0x64, 0x68, 0x59, 0x31, 0x27, 0x74,
	0xe3, 0xfe, 0xf8, 0xc5, 0x68, 0x23, 0xbb, 0x94, 0xf3, 0x82, 0xb2, 0x1d, 0x4d, 0xcd, 0xe3, 0x0d,
	0x3b, 0x3a, 0xdf, 0xf3, 0xbb, 0xa2, 0x65, 0x99, 0x0b, 0x43, 0x98, 0xec, 0xfa, 0x3d, 0xb9, 0xf6,
	0x3b, 0xea, 0xf4, 0xd7, 0x81, 0xc7, 0x47, 0xc2, 0xf0, 0x25, 0x3c, 0x38, 0x00, 0x99, 0x13, 0x3a,
	0xf1, 0x80, 0x1f, 0x0e, 0xf0, 0x2d, 0x40, 0x6d, 0x24, 0xcc, 0x4a, 0x53, 0xc5, 0x3a, 0x36, 0xff,
	0x79, 0x6b, 0xfe, 0x96, 0xc6, 0x6f, 0x29, 0xa2, 0x7f, 0x9d, 0x96, 0x38, 0x1c, 0x82, 0x7f, 0x4e,
	0x22, 0x23, 0x6d, 0x83, 0xfb, 0xe3, 0xd3, 0xad, 0xe3, 0x42, 0xc8, 0xa2, 0x19, 0xf1, 0x0d, 0x05,
	0xdf, 0x81, 0x77, 0xb5, 0x2e, 0x89, 0x75, 0x42, 0x27, 0xbe, 0x37, 0x1e, 0x1e, 0x5d, 0x7e, 0x17,
	0xa9, 0x25, 0xdc, 0x0a, 0x31, 0x82, 0xc1, 0x57, 0x51, 0x99, 0x0b, 0x95, 0xc9, 0x99, 0xa4, 0x8c,
	0xb9, 0xa1, 0x13, 0x7b, 0x7c, 0x07, 0xc3, 0x11, 0x60, 0x73, 0x4e, 0xad, 0x7a, 0xa2, 0x72, 0x99,
	0xae, 0x99, 0x17, 0x3a, 0x71, 0x8f, 0xb7, 0x4c, 0x30, 0x00, 0xf7, 0x0b, 0xad, 0x59, 0xd7, 0x12,
	0xea, 0x23, 0x3e, 0x84, 0xee, 0x0f, 0x91, 0xaf, 0x88, 0xf9, 0xb6, 0xcb, 0xe6, 0x12, 0x7d, 0xde,
	0x5b, 0xdf, 0xbe, 0x10, 0x80, 0xdf, 0xd8, 0x04, 0x77, 0xb0, 0x07, 0x5d, 0xbb, 0x74, 0xe0, 0x60,
	0x1f, 0x4e, 0xbe, 0xeb, 0x8c, 0x34, 0xe9, 0xa0, 0x83, 0x77, 0xc1, 0x9b, 0x10, 0xe9, 0xc0, 0xc5,
	0x13, 0x70, 0x2f, 0x2e, 0x27, 0x81, 0x17, 0xfd, 0x82, 0x47, 0xed, 0x8d, 0x63, 0x0c, 0xf7, 0xab,
	0xeb, 0xcb, 0xad, 0x62, 0x07, 0x7c, 0x1f, 0xc6, 0x67, 0xd0, 0xdb, 0x42, 0xb6, 0xd1, 0x01, 0xbf,
	0x01, 0xde, 0xbf, 0xfa, 0x39, 0x9c, 0x4b, 0xb3, 0x58, 0x4d, 0xeb, 0x92, 0x93, 0xc5, 0xba, 0x24,
	0x9d, 0x53, 0x36, 0x27, 0x9d, 0xcc, 0xc4, 0x54, 0xcb, 0x34, 0xb1, 0x1f, 0x7e, 0xb5, 0xf9, 0x0d,
	0xa6, 0xbe, 0xbd, 0xbe, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xe0, 0x32, 0x62, 0x3d, 0x03,
	0x00, 0x00,
}
