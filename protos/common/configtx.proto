/*
Copyright IBM Corp. 2017 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// XXX This is the older mechanism for specifying channel configuration
// it is intended to be removed once there is no more dependency on it.

syntax = "proto3";

import "common/common.proto";
import "common/policies.proto";

option go_package = "github.com/hyperledger/fabric/protos/common";

package common;

// ConfigEnvelope is designed to contain _all_ configuration for a chain with no dependency
// on previous configuration transactions.
//
// It is generated with the following scheme:
//   1. Retrieve the existing configuration
//   2. Note the highest configuration sequence number, store it and increment it by one
//   3. Modify desired ConfigItems, setting each LastModified to the stored and incremented sequence number
//     a) Note that the ConfigItem has a ChainHeader header attached to it, who's type is set to CONFIGURATION_ITEM
//   4. Create Config message containing the new configuration, marshal it into ConfigEnvelope.config and encode the required signatures
//     a) Each signature is of type ConfigSignature
//     b) The ConfigSignature signature is over the concatenation of signatureHeader and the Config bytes (which includes a ChainHeader)
//   5. Submit new Config for ordering in Envelope signed by submitter
//     a) The Envelope Payload has data set to the marshaled ConfigEnvelope
//     b) The Envelope Payload has a header of type Header.Type.CONFIGURATION_TRANSACTION
//
// The configuration manager will verify:
//   1. All configuration items and the envelope refer to the correct chain
//   2. Some configuration item has been added or modified
//   3. No existing configuration item has been ommitted
//   4. All configuration changes have a LastModification of one more than the last configuration's highest LastModification number
//   5. All configuration changes satisfy the corresponding modification policy
message ConfigEnvelope {
    bytes config = 1;                        // A marshaled ConfigNext structure
    repeated ConfigSignature signatures = 2; // Signatures over the config
}

// ConfigTemplate is used as a serialization format to share configuration templates
// The orderer supplies a configuration template to the user to use when constructing a new
// chain creation transaction, so this is used to facilitate that.
message ConfigTemplate {
    repeated ConfigItem Items = 1;
}

// This message may change slightly depending on the finalization of signature schemes for transactions
message Config {
    ChainHeader header = 1;
    repeated ConfigItem items = 2;
}

// XXX this structure is to allow us to minimize the diffs in this change series
// it will be renamed Config once the original is ready to be removed
message ConfigNext {
    ChainHeader header = 1;
    ConfigGroup channel = 2;
}

// ConfigGroup is the hierarchical data structure for holding config
message ConfigGroup {
    uint64 version = 1;
    map<string,ConfigGroup> groups = 2;
    map<string,ConfigValue> values = 3;
    map<string,ConfigPolicy> policies = 4;
    string mod_policy = 5;
}

// ConfigValue represents an individual piece of config data
message ConfigValue {
    uint64 version = 1;
    bytes value = 2;
    string mod_policy = 3;
}

message ConfigPolicy {
    uint64 version = 1;
    Policy policy = 2;
    string mod_policy = 3;
}

message ConfigItem {
    enum ConfigType {
        Policy = 0;   // Implies that the Value is a marshaled Policy message, and may be referred to by Key as a ModificationPolicy
        Chain = 1;    // Marshaled format for this type is yet to be determined
        Orderer = 2;  // Marshaled format for this type is yet to be determined
        Peer = 3;     // Marshaled format for this type is yet to be determined
        MSP = 4;      // Marshaled MSPConfig proto
    }
    ConfigType Type = 1;     // The type of configuration this is.
    uint64 LastModified = 2;        // The Sequence number in the ConfigEnvelope this item was last modified
    string ModificationPolicy = 3;  // What policy to check before allowing modification
    string Key = 4;                 // A unique ID, unique scoped by Type, to reference the value by
    bytes Value = 5;                // The byte representation of this configuration, usually a marshaled message
}

message ConfigSignature {
    bytes signature_header = 1; // A marshaled SignatureHeader
    bytes signature = 2;        // Signature over the concatenation signatureHeader bytes and config bytes
}
