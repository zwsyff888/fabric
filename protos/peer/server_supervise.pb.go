// Code generated by protoc-gen-go.
// source: peer/server_supervise.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PeerReply) Reset()                    { *m = PeerReply{} }
func (m *PeerReply) String() string            { return proto.CompactTextString(m) }
func (*PeerReply) ProtoMessage()               {}
func (*PeerReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type ConnectPeer struct {
	Endpoint string `protobuf:"bytes,1,opt,name=Endpoint" json:"Endpoint,omitempty"`
	Metadata []byte `protobuf:"bytes,2,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	PKIid    []byte `protobuf:"bytes,3,opt,name=PKIid,proto3" json:"PKIid,omitempty"`
}

func (m *ConnectPeer) Reset()                    { *m = ConnectPeer{} }
func (m *ConnectPeer) String() string            { return proto.CompactTextString(m) }
func (*ConnectPeer) ProtoMessage()               {}
func (*ConnectPeer) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

type PeerInfo struct {
	PeerHeight   uint64         `protobuf:"varint,1,opt,name=peerHeight" json:"peerHeight,omitempty"`
	PeerEndpoint *PeerEndpoint  `protobuf:"bytes,2,opt,name=peerEndpoint" json:"peerEndpoint,omitempty"`
	ConnectPeers []*ConnectPeer `protobuf:"bytes,3,rep,name=connectPeers" json:"connectPeers,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *PeerInfo) GetPeerEndpoint() *PeerEndpoint {
	if m != nil {
		return m.PeerEndpoint
	}
	return nil
}

func (m *PeerInfo) GetConnectPeers() []*ConnectPeer {
	if m != nil {
		return m.ConnectPeers
	}
	return nil
}

func init() {
	proto.RegisterType((*PeerReply)(nil), "protos.PeerReply")
	proto.RegisterType((*ConnectPeer)(nil), "protos.ConnectPeer")
	proto.RegisterType((*PeerInfo)(nil), "protos.PeerInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Supervise service

type SuperviseClient interface {
	GetPeer(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*PeerReply, error)
}

type superviseClient struct {
	cc *grpc.ClientConn
}

func NewSuperviseClient(cc *grpc.ClientConn) SuperviseClient {
	return &superviseClient{cc}
}

func (c *superviseClient) GetPeer(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*PeerReply, error) {
	out := new(PeerReply)
	err := grpc.Invoke(ctx, "/protos.Supervise/GetPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Supervise service

type SuperviseServer interface {
	GetPeer(context.Context, *PeerInfo) (*PeerReply, error)
}

func RegisterSuperviseServer(s *grpc.Server, srv SuperviseServer) {
	s.RegisterService(&_Supervise_serviceDesc, srv)
}

func _Supervise_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperviseServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Supervise/GetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperviseServer).GetPeer(ctx, req.(*PeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Supervise_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Supervise",
	HandlerType: (*SuperviseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeer",
			Handler:    _Supervise_GetPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor10,
}

func init() { proto.RegisterFile("peer/server_supervise.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x91, 0x5d, 0x4b, 0xf3, 0x30,
	0x14, 0xc7, 0x9f, 0x3e, 0x53, 0xb7, 0x9d, 0x0d, 0xd4, 0xb8, 0x8b, 0xd2, 0x81, 0x8c, 0x82, 0x30,
	0x11, 0x56, 0x99, 0x17, 0x7a, 0xe3, 0x8d, 0x22, 0x3a, 0x44, 0x18, 0xf1, 0x4e, 0x2f, 0xa4, 0x2f,
	0x67, 0x59, 0x60, 0x6b, 0x42, 0x92, 0x0d, 0xf6, 0x61, 0xfc, 0xae, 0x92, 0xc4, 0xd6, 0xee, 0xa6,
	0xe5, 0x77, 0xfe, 0xff, 0x9c, 0x57, 0x18, 0x4a, 0x44, 0x95, 0x68, 0x54, 0x5b, 0x54, 0x5f, 0x7a,
	0x23, 0x51, 0x6d, 0xb9, 0xc6, 0x89, 0x54, 0xc2, 0x08, 0x72, 0xe4, 0x7e, 0x3a, 0x3a, 0x76, 0x26,
	0xfb, 0xf1, 0x42, 0x34, 0x64, 0x42, 0xb0, 0x15, 0x26, 0x8e, 0xb2, 0xcd, 0x22, 0xc1, 0xb5, 0x34,
	0x3b, 0x2f, 0xc6, 0x17, 0xd0, 0x9d, 0x23, 0x2a, 0x8a, 0x72, 0xb5, 0x23, 0x21, 0xb4, 0xd7, 0xa8,
	0x75, 0xca, 0x30, 0x0c, 0x46, 0xc1, 0xb8, 0x4b, 0x2b, 0x8c, 0x3f, 0xa1, 0xf7, 0x28, 0xca, 0x12,
	0x73, 0x63, 0xdd, 0x24, 0x82, 0xce, 0x53, 0x59, 0x48, 0xc1, 0x4b, 0xf3, 0xeb, 0xac, 0xd9, 0x6a,
	0x6f, 0x68, 0xd2, 0x22, 0x35, 0x69, 0xf8, 0x7f, 0x14, 0x8c, 0xfb, 0xb4, 0x66, 0x32, 0x80, 0xc3,
	0xf9, 0xeb, 0x8c, 0x17, 0x61, 0xcb, 0x09, 0x1e, 0xe2, 0xef, 0x00, 0x3a, 0x36, 0xed, 0xac, 0x5c,
	0x08, 0x72, 0x0e, 0x60, 0x7b, 0x7f, 0x41, 0xce, 0x96, 0x3e, 0xf9, 0x01, 0x6d, 0x44, 0xc8, 0x1d,
	0xf4, 0x2d, 0xd5, 0xe5, 0x6d, 0x89, 0xde, 0x74, 0xe0, 0xc7, 0xd1, 0x93, 0x79, 0x43, 0xa3, 0x7b,
	0x4e, 0x72, 0x0b, 0xfd, 0xfc, 0x6f, 0x06, 0x1d, 0xb6, 0x46, 0xad, 0x71, 0x6f, 0x7a, 0x56, 0xbd,
	0x6c, 0xcc, 0x47, 0xf7, 0x8c, 0xd3, 0x7b, 0xe8, 0xbe, 0x57, 0xcb, 0x26, 0xd7, 0xd0, 0x7e, 0x46,
	0xbf, 0x85, 0x93, 0x66, 0x51, 0xdb, 0x7c, 0x74, 0xda, 0x8c, 0xb8, 0x9d, 0xc6, 0xff, 0x1e, 0xae,
	0x3e, 0x2e, 0x19, 0x37, 0xcb, 0x4d, 0x36, 0xc9, 0xc5, 0x3a, 0x59, 0xee, 0x24, 0xaa, 0x15, 0x16,
	0x0c, 0x55, 0xb2, 0x48, 0x33, 0xc5, 0x73, 0x7f, 0x18, 0xed, 0x4e, 0x96, 0xf9, 0x2b, 0xde, 0xfc,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x87, 0xc4, 0xfe, 0x0c, 0xeb, 0x01, 0x00, 0x00,
}
