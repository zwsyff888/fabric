// Code generated by protoc-gen-go.
// source: peer/transaction.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InvalidTransaction_Cause int32

const (
	InvalidTransaction_TX_ID_ALREADY_EXISTS      InvalidTransaction_Cause = 0
	InvalidTransaction_RW_CONFLICT_DURING_COMMIT InvalidTransaction_Cause = 1
)

var InvalidTransaction_Cause_name = map[int32]string{
	0: "TX_ID_ALREADY_EXISTS",
	1: "RW_CONFLICT_DURING_COMMIT",
}
var InvalidTransaction_Cause_value = map[string]int32{
	"TX_ID_ALREADY_EXISTS":      0,
	"RW_CONFLICT_DURING_COMMIT": 1,
}

func (x InvalidTransaction_Cause) String() string {
	return proto.EnumName(InvalidTransaction_Cause_name, int32(x))
}
func (InvalidTransaction_Cause) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 0} }

// This message is necessary to facilitate the verification of the signature
// (in the signature field) over the bytes of the transaction (in the
// transactionBytes field).
type SignedTransaction struct {
	// The bytes of the Transaction. NDD
	TransactionBytes []byte `protobuf:"bytes,1,opt,name=transaction_bytes,json=transactionBytes,proto3" json:"transaction_bytes,omitempty"`
	// Signature of the transactionBytes The public key of the signature is in
	// the header field of TransactionAction There might be multiple
	// TransactionAction, so multiple headers, but there should be same
	// transactor identity (cert) in all headers
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedTransaction) Reset()                    { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string            { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()               {}
func (*SignedTransaction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

// This is used to wrap an invalid Transaction with the cause
type InvalidTransaction struct {
	Transaction *Transaction             `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	Cause       InvalidTransaction_Cause `protobuf:"varint,2,opt,name=cause,enum=protos.InvalidTransaction_Cause" json:"cause,omitempty"`
}

func (m *InvalidTransaction) Reset()                    { *m = InvalidTransaction{} }
func (m *InvalidTransaction) String() string            { return proto.CompactTextString(m) }
func (*InvalidTransaction) ProtoMessage()               {}
func (*InvalidTransaction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *InvalidTransaction) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// The transaction to be sent to the ordering service. A transaction contains
// one or more TransactionAction. Each TransactionAction binds a proposal to
// potentially multiple actions. The transaction is atomic meaning that either
// all actions in the transaction will be committed or none will.  Note that
// while a Transaction might include more than one Header, the Header.creator
// field must be the same in each.
// A single client is free to issue a number of independent Proposal, each with
// their header (Header) and request payload (ChaincodeProposalPayload).  Each
// proposal is independently endorsed generating an action
// (ProposalResponsePayload) with one signature per Endorser. Any number of
// independent proposals (and their action) might be included in a transaction
// to ensure that they are treated atomically.
type Transaction struct {
	// Version indicates message protocol version.
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Timestamp is the local time that the
	// message was created by the sender
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The payload is an array of TransactionAction. An array is necessary to
	// accommodate multiple actions per transaction
	Actions []*TransactionAction `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *Transaction) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Transaction) GetActions() []*TransactionAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

// TransactionAction binds a proposal to its action.  The type field in the
// header dictates the type of action to be applied to the ledger.
type TransactionAction struct {
	// The header of the proposal action, which is the proposal header
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The payload of the action as defined by the type in the header For
	// chaincode, it's the bytes of ChaincodeActionPayload
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *TransactionAction) Reset()                    { *m = TransactionAction{} }
func (m *TransactionAction) String() string            { return proto.CompactTextString(m) }
func (*TransactionAction) ProtoMessage()               {}
func (*TransactionAction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

// ChaincodeActionPayload is the message to be used for the TransactionAction's
// payload when the Header's type is set to CHAINCODE.  It carries the
// chaincodeProposalPayload and an endorsed action to apply to the ledger.
type ChaincodeActionPayload struct {
	// This field contains the bytes of the ChaincodeProposalPayload message from
	// the original invocation (essentially the arguments) after the application
	// of the visibility function. The main visibility modes are "full" (the
	// entire ChaincodeProposalPayload message is included here), "hash" (only
	// the hash of the ChaincodeProposalPayload message is included) or
	// "nothing".  This field will be used to check the consistency of
	// ProposalResponsePayload.proposalHash.  For the CHAINCODE type,
	// ProposalResponsePayload.proposalHash is supposed to be H(ProposalHeader ||
	// f(ChaincodeProposalPayload)) where f is the visibility function.
	ChaincodeProposalPayload []byte `protobuf:"bytes,1,opt,name=chaincode_proposal_payload,json=chaincodeProposalPayload,proto3" json:"chaincode_proposal_payload,omitempty"`
	// The list of actions to apply to the ledger
	Action *ChaincodeEndorsedAction `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
}

func (m *ChaincodeActionPayload) Reset()                    { *m = ChaincodeActionPayload{} }
func (m *ChaincodeActionPayload) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeActionPayload) ProtoMessage()               {}
func (*ChaincodeActionPayload) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *ChaincodeActionPayload) GetAction() *ChaincodeEndorsedAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// ChaincodeEndorsedAction carries information about the endorsement of a
// specific proposal
type ChaincodeEndorsedAction struct {
	// This is the bytes of the ProposalResponsePayload message signed by the
	// endorsers.  Recall that for the CHAINCODE type, the
	// ProposalResponsePayload's extenstion field carries a ChaincodeAction
	ProposalResponsePayload []byte `protobuf:"bytes,1,opt,name=proposal_response_payload,json=proposalResponsePayload,proto3" json:"proposal_response_payload,omitempty"`
	// The endorsement of the proposal, basically the endorser's signature over
	// proposalResponsePayload
	Endorsements []*Endorsement `protobuf:"bytes,2,rep,name=endorsements" json:"endorsements,omitempty"`
}

func (m *ChaincodeEndorsedAction) Reset()                    { *m = ChaincodeEndorsedAction{} }
func (m *ChaincodeEndorsedAction) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeEndorsedAction) ProtoMessage()               {}
func (*ChaincodeEndorsedAction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *ChaincodeEndorsedAction) GetEndorsements() []*Endorsement {
	if m != nil {
		return m.Endorsements
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedTransaction)(nil), "protos.SignedTransaction")
	proto.RegisterType((*InvalidTransaction)(nil), "protos.InvalidTransaction")
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*TransactionAction)(nil), "protos.TransactionAction")
	proto.RegisterType((*ChaincodeActionPayload)(nil), "protos.ChaincodeActionPayload")
	proto.RegisterType((*ChaincodeEndorsedAction)(nil), "protos.ChaincodeEndorsedAction")
	proto.RegisterEnum("protos.InvalidTransaction_Cause", InvalidTransaction_Cause_name, InvalidTransaction_Cause_value)
}

func init() { proto.RegisterFile("peer/transaction.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0xe7, 0x96, 0xa6, 0xf4, 0xa4, 0x8c, 0x44, 0x1b, 0xa9, 0x13, 0x3a, 0x1a, 0x7c, 0xd5,
	0x51, 0xb0, 0x21, 0x65, 0x7f, 0x18, 0xbb, 0x58, 0xea, 0x78, 0xc3, 0xd0, 0x7f, 0x28, 0x1e, 0xeb,
	0x76, 0x31, 0x23, 0xdb, 0xaa, 0x63, 0x70, 0x2c, 0x23, 0x39, 0x85, 0xbc, 0xc4, 0x76, 0xb7, 0x37,
	0xda, 0x7b, 0x8d, 0x58, 0x96, 0xed, 0x2e, 0xdb, 0x95, 0x39, 0xfe, 0x7e, 0xfa, 0xbe, 0x23, 0x1d,
	0x09, 0x06, 0x39, 0xa5, 0xdc, 0x2a, 0x38, 0xc9, 0x04, 0x09, 0x8b, 0x84, 0x65, 0x66, 0xce, 0x59,
	0xc1, 0x50, 0xa7, 0xfc, 0x88, 0xd1, 0x49, 0xcc, 0x58, 0x9c, 0x52, 0xab, 0x2c, 0x83, 0xd5, 0xbd,
	0x55, 0x24, 0x4b, 0x2a, 0x0a, 0xb2, 0xcc, 0x25, 0x38, 0x3a, 0x2e, 0x0d, 0x72, 0xce, 0x72, 0x26,
	0x48, 0xea, 0x73, 0x2a, 0x72, 0x96, 0x09, 0x2a, 0x55, 0xe3, 0x3b, 0xf4, 0xe7, 0x49, 0x9c, 0xd1,
	0xc8, 0x6b, 0x12, 0xd0, 0x19, 0xf4, 0x5b, 0x81, 0x7e, 0xb0, 0x2e, 0xa8, 0xd0, 0xb5, 0xb1, 0x76,
	0x7a, 0x88, 0x7b, 0x2d, 0xe1, 0x62, 0xf3, 0x1f, 0x1d, 0xc3, 0x81, 0x48, 0xe2, 0x8c, 0x14, 0x2b,
	0x4e, 0xf5, 0x9d, 0x12, 0x6a, 0x7e, 0x18, 0xbf, 0x35, 0x40, 0x6e, 0xf6, 0x40, 0xd2, 0xe4, 0x51,
	0xc2, 0x2b, 0xe8, 0xb6, 0x8c, 0x4a, 0xef, 0xee, 0xe4, 0x99, 0xec, 0x49, 0x98, 0x2d, 0x12, 0xb7,
	0x39, 0xf4, 0x1a, 0xf6, 0x42, 0xb2, 0x12, 0x32, 0xe7, 0xe9, 0x64, 0xac, 0x16, 0x6c, 0x27, 0x98,
	0xf6, 0x86, 0xc3, 0x12, 0x37, 0x3e, 0xc0, 0x5e, 0x59, 0x23, 0x1d, 0x9e, 0x7b, 0x77, 0xbe, 0x3b,
	0xf3, 0xa7, 0x97, 0xd8, 0x99, 0xce, 0xbe, 0xfa, 0xce, 0x9d, 0x3b, 0xf7, 0xe6, 0xbd, 0x27, 0xe8,
	0x05, 0x0c, 0xf1, 0x17, 0xdf, 0xbe, 0xb9, 0xfe, 0x78, 0xe9, 0xda, 0x9e, 0x3f, 0xfb, 0x8c, 0xdd,
	0xeb, 0x4f, 0xbe, 0x7d, 0x73, 0x75, 0xe5, 0x7a, 0x3d, 0xcd, 0xf8, 0xa5, 0x41, 0xb7, 0xbd, 0x01,
	0x1d, 0xf6, 0x1f, 0x28, 0x17, 0xaa, 0xf9, 0x3d, 0xac, 0x4a, 0xf4, 0x16, 0x0e, 0xea, 0x11, 0x94,
	0x7d, 0x76, 0x27, 0x23, 0x53, 0x0e, 0xc9, 0x54, 0x43, 0x32, 0x3d, 0x45, 0xe0, 0x06, 0x46, 0xe7,
	0xb0, 0x2f, 0xdd, 0x85, 0xbe, 0x3b, 0xde, 0x3d, 0xed, 0x4e, 0x86, 0xff, 0x38, 0x90, 0xa9, 0x3c,
	0x16, 0x45, 0x1a, 0x0e, 0xf4, 0xb7, 0x54, 0x34, 0x80, 0xce, 0x82, 0x92, 0x88, 0xf2, 0x6a, 0x6a,
	0x55, 0xb5, 0xe9, 0x3a, 0x27, 0xeb, 0x94, 0x91, 0xa8, 0x9a, 0x94, 0x2a, 0x8d, 0x9f, 0x1a, 0x0c,
	0xec, 0x05, 0x49, 0xb2, 0x90, 0x45, 0x54, 0xba, 0xdc, 0x4a, 0x09, 0xbd, 0x87, 0x51, 0xa8, 0x14,
	0xbf, 0xbe, 0x47, 0xca, 0x47, 0x06, 0xe8, 0x35, 0x71, 0x5b, 0x01, 0x6a, 0xf5, 0x1b, 0xe8, 0x54,
	0x43, 0x96, 0x67, 0x71, 0xa2, 0xf6, 0x54, 0xa7, 0x39, 0x59, 0xc4, 0xb8, 0xa0, 0x51, 0xb5, 0xb3,
	0x0a, 0x37, 0x7e, 0x68, 0x70, 0xf4, 0x1f, 0x06, 0xbd, 0x83, 0xe1, 0xd6, 0x85, 0xfe, 0xab, 0xa3,
	0x23, 0x05, 0xe0, 0x4a, 0x6f, 0x1a, 0x3a, 0xa4, 0xd2, 0x6d, 0x49, 0xb3, 0x42, 0xe8, 0x3b, 0xe5,
	0x51, 0xd7, 0x77, 0xcf, 0x69, 0x34, 0xfc, 0x08, 0xbc, 0x38, 0xfb, 0xf6, 0x32, 0x4e, 0x8a, 0xc5,
	0x2a, 0x30, 0x43, 0xb6, 0xb4, 0x16, 0xeb, 0x9c, 0xf2, 0x94, 0x46, 0x31, 0xe5, 0xd6, 0x3d, 0x09,
	0x78, 0x12, 0xca, 0x27, 0x28, 0xac, 0xcd, 0x7b, 0x0b, 0xe4, 0xf3, 0x3c, 0xff, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xf9, 0x23, 0xe4, 0x85, 0xbf, 0x03, 0x00, 0x00,
}
