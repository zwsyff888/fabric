// Code generated by protoc-gen-go.
// source: peer/processMessage.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryBlocks struct {
	BlockIndex uint64 `protobuf:"varint,1,opt,name=BlockIndex" json:"BlockIndex,omitempty"`
}

func (m *QueryBlocks) Reset()                    { *m = QueryBlocks{} }
func (m *QueryBlocks) String() string            { return proto.CompactTextString(m) }
func (*QueryBlocks) ProtoMessage()               {}
func (*QueryBlocks) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

type MessageInput struct {
	PeerIp   string    `protobuf:"bytes,1,opt,name=PeerIp" json:"PeerIp,omitempty"`
	Height   uint64    `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	PeerName string    `protobuf:"bytes,3,opt,name=PeerName" json:"PeerName,omitempty"`
	Mblocks  []*Mblock `protobuf:"bytes,4,rep,name=Mblocks" json:"Mblocks,omitempty"`
}

func (m *MessageInput) Reset()                    { *m = MessageInput{} }
func (m *MessageInput) String() string            { return proto.CompactTextString(m) }
func (*MessageInput) ProtoMessage()               {}
func (*MessageInput) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *MessageInput) GetMblocks() []*Mblock {
	if m != nil {
		return m.Mblocks
	}
	return nil
}

type Mblock struct {
	Header   *MblockHeader   `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Data     *MblockData     `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Metadata *MblockMetadata `protobuf:"bytes,3,opt,name=Metadata" json:"Metadata,omitempty"`
}

func (m *Mblock) Reset()                    { *m = Mblock{} }
func (m *Mblock) String() string            { return proto.CompactTextString(m) }
func (*Mblock) ProtoMessage()               {}
func (*Mblock) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *Mblock) GetHeader() *MblockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Mblock) GetData() *MblockData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Mblock) GetMetadata() *MblockMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type MblockHeader struct {
	Number       uint64 `protobuf:"varint,1,opt,name=Number" json:"Number,omitempty"`
	PreviousHash string `protobuf:"bytes,2,opt,name=PreviousHash" json:"PreviousHash,omitempty"`
	DataHash     string `protobuf:"bytes,3,opt,name=DataHash" json:"DataHash,omitempty"`
	NowHash      string `protobuf:"bytes,4,opt,name=NowHash" json:"NowHash,omitempty"`
}

func (m *MblockHeader) Reset()                    { *m = MblockHeader{} }
func (m *MblockHeader) String() string            { return proto.CompactTextString(m) }
func (*MblockHeader) ProtoMessage()               {}
func (*MblockHeader) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

type MblockData struct {
	Datas []*TransData `protobuf:"bytes,1,rep,name=Datas" json:"Datas,omitempty"`
}

func (m *MblockData) Reset()                    { *m = MblockData{} }
func (m *MblockData) String() string            { return proto.CompactTextString(m) }
func (*MblockData) ProtoMessage()               {}
func (*MblockData) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *MblockData) GetDatas() []*TransData {
	if m != nil {
		return m.Datas
	}
	return nil
}

type TransData struct {
	Txid    string                     `protobuf:"bytes,1,opt,name=Txid" json:"Txid,omitempty"`
	ChainID string                     `protobuf:"bytes,2,opt,name=ChainID" json:"ChainID,omitempty"`
	Time    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=Time" json:"Time,omitempty"`
}

func (m *TransData) Reset()                    { *m = TransData{} }
func (m *TransData) String() string            { return proto.CompactTextString(m) }
func (*TransData) ProtoMessage()               {}
func (*TransData) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *TransData) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type MblockMetadata struct {
	Metadata []string `protobuf:"bytes,1,rep,name=Metadata" json:"Metadata,omitempty"`
}

func (m *MblockMetadata) Reset()                    { *m = MblockMetadata{} }
func (m *MblockMetadata) String() string            { return proto.CompactTextString(m) }
func (*MblockMetadata) ProtoMessage()               {}
func (*MblockMetadata) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

type MessageOutput struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *MessageOutput) Reset()                    { *m = MessageOutput{} }
func (m *MessageOutput) String() string            { return proto.CompactTextString(m) }
func (*MessageOutput) ProtoMessage()               {}
func (*MessageOutput) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func init() {
	proto.RegisterType((*QueryBlocks)(nil), "protos.QueryBlocks")
	proto.RegisterType((*MessageInput)(nil), "protos.MessageInput")
	proto.RegisterType((*Mblock)(nil), "protos.Mblock")
	proto.RegisterType((*MblockHeader)(nil), "protos.MblockHeader")
	proto.RegisterType((*MblockData)(nil), "protos.MblockData")
	proto.RegisterType((*TransData)(nil), "protos.TransData")
	proto.RegisterType((*MblockMetadata)(nil), "protos.MblockMetadata")
	proto.RegisterType((*MessageOutput)(nil), "protos.MessageOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StatusPeer service

type StatusPeerClient interface {
	ProcessMessage(ctx context.Context, in *MessageInput, opts ...grpc.CallOption) (*MessageOutput, error)
}

type statusPeerClient struct {
	cc *grpc.ClientConn
}

func NewStatusPeerClient(cc *grpc.ClientConn) StatusPeerClient {
	return &statusPeerClient{cc}
}

func (c *statusPeerClient) ProcessMessage(ctx context.Context, in *MessageInput, opts ...grpc.CallOption) (*MessageOutput, error) {
	out := new(MessageOutput)
	err := grpc.Invoke(ctx, "/protos.statusPeer/ProcessMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusPeer service

type StatusPeerServer interface {
	ProcessMessage(context.Context, *MessageInput) (*MessageOutput, error)
}

func RegisterStatusPeerServer(s *grpc.Server, srv StatusPeerServer) {
	s.RegisterService(&_StatusPeer_serviceDesc, srv)
}

func _StatusPeer_ProcessMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusPeerServer).ProcessMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.statusPeer/ProcessMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusPeerServer).ProcessMessage(ctx, req.(*MessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.statusPeer",
	HandlerType: (*StatusPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessMessage",
			Handler:    _StatusPeer_ProcessMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor12,
}

// Client API for QueryPeer service

type QueryPeerClient interface {
	QueryMessage(ctx context.Context, in *QueryBlocks, opts ...grpc.CallOption) (*Mblock, error)
}

type queryPeerClient struct {
	cc *grpc.ClientConn
}

func NewQueryPeerClient(cc *grpc.ClientConn) QueryPeerClient {
	return &queryPeerClient{cc}
}

func (c *queryPeerClient) QueryMessage(ctx context.Context, in *QueryBlocks, opts ...grpc.CallOption) (*Mblock, error) {
	out := new(Mblock)
	err := grpc.Invoke(ctx, "/protos.queryPeer/QueryMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueryPeer service

type QueryPeerServer interface {
	QueryMessage(context.Context, *QueryBlocks) (*Mblock, error)
}

func RegisterQueryPeerServer(s *grpc.Server, srv QueryPeerServer) {
	s.RegisterService(&_QueryPeer_serviceDesc, srv)
}

func _QueryPeer_QueryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryPeerServer).QueryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.queryPeer/QueryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryPeerServer).QueryMessage(ctx, req.(*QueryBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.queryPeer",
	HandlerType: (*QueryPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMessage",
			Handler:    _QueryPeer_QueryMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor12,
}

func init() { proto.RegisterFile("peer/processMessage.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x5e, 0x59, 0xe8, 0xd6, 0xd7, 0x52, 0x09, 0x03, 0x53, 0xe8, 0x01, 0x26, 0x1f, 0x58, 0x11,
	0x23, 0x91, 0x82, 0x76, 0x46, 0x2a, 0x3b, 0xac, 0x87, 0x96, 0x12, 0xf5, 0xc4, 0xcd, 0x69, 0xbd,
	0x24, 0xa2, 0xa9, 0x83, 0xed, 0xc0, 0x76, 0xe3, 0xc0, 0x2f, 0xe0, 0x17, 0x23, 0x3f, 0xdb, 0x5d,
	0xb2, 0x53, 0xfc, 0xbd, 0xef, 0xb3, 0xfd, 0xf9, 0xe5, 0x7b, 0xf0, 0xba, 0xe6, 0x5c, 0xc6, 0xb5,
	0x14, 0x1b, 0xae, 0xd4, 0x82, 0x2b, 0xc5, 0x72, 0x1e, 0xd5, 0x52, 0x68, 0x41, 0xfa, 0xf8, 0x51,
	0x93, 0xb7, 0xb9, 0x10, 0xf9, 0x8e, 0xc7, 0x08, 0xb3, 0xe6, 0x36, 0xd6, 0x65, 0xc5, 0x95, 0x66,
	0x55, 0x6d, 0x85, 0xf4, 0x23, 0x0c, 0xbf, 0x35, 0x5c, 0xde, 0xcf, 0x76, 0x62, 0xf3, 0x43, 0x91,
	0x37, 0x00, 0xb8, 0x9a, 0xef, 0xb7, 0xfc, 0x2e, 0xec, 0x9d, 0xf7, 0xa6, 0x41, 0xda, 0xaa, 0xd0,
	0xbf, 0x3d, 0x18, 0xb9, 0x9b, 0xe6, 0xfb, 0xba, 0xd1, 0xe4, 0x0c, 0xfa, 0x2b, 0xce, 0xe5, 0xbc,
	0x46, 0xf1, 0x20, 0x75, 0xc8, 0xd4, 0x6f, 0x78, 0x99, 0x17, 0x3a, 0x7c, 0x82, 0x87, 0x38, 0x44,
	0x26, 0x70, 0x6a, 0x14, 0x4b, 0x56, 0xf1, 0xf0, 0x18, 0x77, 0x1c, 0x30, 0x99, 0xc2, 0xc9, 0x22,
	0x43, 0x1f, 0x61, 0x70, 0x7e, 0x3c, 0x1d, 0x26, 0x63, 0x6b, 0x52, 0x45, 0xb6, 0x9c, 0x7a, 0x9a,
	0xfe, 0xeb, 0x41, 0xdf, 0xae, 0xc9, 0xa5, 0xb9, 0x88, 0x6d, 0xb9, 0x44, 0x03, 0xc3, 0xe4, 0x65,
	0x77, 0x8f, 0xe5, 0x52, 0xa7, 0x21, 0xef, 0x20, 0xb8, 0x66, 0x9a, 0xa1, 0xa9, 0x61, 0x42, 0xba,
	0x5a, 0xc3, 0xa4, 0xc8, 0x93, 0x04, 0x4e, 0x17, 0x5c, 0xb3, 0xad, 0xd1, 0x1e, 0xa3, 0xf6, 0xac,
	0xab, 0xf5, 0x6c, 0x7a, 0xd0, 0xd1, 0x3f, 0xa6, 0x37, 0xad, 0x4b, 0x4d, 0x0f, 0x96, 0x4d, 0x95,
	0x39, 0x6b, 0x41, 0xea, 0x10, 0xa1, 0x30, 0x5a, 0x49, 0xfe, 0xab, 0x14, 0x8d, 0xba, 0x61, 0xaa,
	0x40, 0x33, 0x83, 0xb4, 0x53, 0x33, 0x7d, 0x32, 0x46, 0x90, 0x77, 0x7d, 0xf2, 0x98, 0x84, 0x70,
	0xb2, 0x14, 0xbf, 0x91, 0x0a, 0x90, 0xf2, 0x90, 0x5e, 0x01, 0x3c, 0x3c, 0x85, 0x5c, 0xc0, 0x53,
	0xf3, 0x55, 0x61, 0x0f, 0xbb, 0xf9, 0xdc, 0xbf, 0x60, 0x2d, 0xd9, 0x5e, 0xe1, 0x63, 0x2d, 0x4f,
	0x4b, 0x18, 0x1c, 0x6a, 0x84, 0x40, 0xb0, 0xbe, 0x2b, 0xb7, 0xee, 0x7f, 0xe2, 0xda, 0xdc, 0xf8,
	0xa5, 0x60, 0xe5, 0x7e, 0x7e, 0xed, 0xcc, 0x7a, 0x48, 0x22, 0x08, 0xd6, 0xa5, 0xfb, 0x97, 0xc3,
	0x64, 0x12, 0xd9, 0xbc, 0x45, 0x3e, 0x6f, 0xd1, 0xda, 0xe7, 0x2d, 0x45, 0x1d, 0xbd, 0x84, 0x71,
	0xb7, 0x81, 0xe6, 0xa5, 0x87, 0x56, 0x1b, 0xa3, 0x83, 0x56, 0x4b, 0x2f, 0xe0, 0x99, 0x4b, 0xdb,
	0xd7, 0x46, 0xbb, 0xb8, 0x09, 0x5c, 0xf9, 0xb8, 0x59, 0x94, 0x2c, 0x00, 0x94, 0x66, 0xba, 0x51,
	0x26, 0x4c, 0xe4, 0x33, 0x8c, 0x57, 0x9d, 0xa9, 0x20, 0x0f, 0xa9, 0x68, 0x85, 0x77, 0xf2, 0xea,
	0x51, 0xd5, 0x5e, 0x42, 0x8f, 0x92, 0x19, 0x0c, 0x7e, 0x9a, 0xa9, 0xc0, 0xd3, 0xae, 0x60, 0x84,
	0x23, 0xe2, 0xcf, 0x7a, 0xe1, 0x77, 0xb5, 0x06, 0x67, 0xf2, 0x28, 0xaa, 0xf4, 0x68, 0xf6, 0xe1,
	0xfb, 0xfb, 0xbc, 0xd4, 0x45, 0x93, 0x45, 0x1b, 0x51, 0xc5, 0xc5, 0x7d, 0xcd, 0xe5, 0x8e, 0x6f,
	0x73, 0x2e, 0xe3, 0x5b, 0x96, 0xc9, 0x72, 0x63, 0x67, 0x52, 0xc5, 0x66, 0x88, 0x33, 0x3b, 0xaf,
	0x9f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xec, 0x1c, 0x4e, 0x43, 0xd3, 0x03, 0x00, 0x00,
}
