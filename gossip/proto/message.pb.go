// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	GossipMessage
	StateInfo
	StateInfoSnapshot
	StateInfoPullRequest
	ConnEstablish
	PeerIdentity
	DataRequest
	GossipHello
	DataUpdate
	DataDigest
	DataMessage
	Payload
	AliveMessage
	LeadershipMessage
	PeerTime
	MembershipRequest
	MembershipResponse
	Member
	Empty
	RemoteStateRequest
	RemoteStateResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type PullMsgType int32

const (
	PullMsgType_Undefined    PullMsgType = 0
	PullMsgType_BlockMessage PullMsgType = 1
	PullMsgType_IdentityMsg  PullMsgType = 2
)

var PullMsgType_name = map[int32]string{
	0: "Undefined",
	1: "BlockMessage",
	2: "IdentityMsg",
}
var PullMsgType_value = map[string]int32{
	"Undefined":    0,
	"BlockMessage": 1,
	"IdentityMsg":  2,
}

func (x PullMsgType) String() string {
	return proto1.EnumName(PullMsgType_name, int32(x))
}
func (PullMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GossipMessage_Tag int32

const (
	GossipMessage_UNDEFINED    GossipMessage_Tag = 0
	GossipMessage_EMPTY        GossipMessage_Tag = 1
	GossipMessage_ORG_ONLY     GossipMessage_Tag = 2
	GossipMessage_CHAN_ONLY    GossipMessage_Tag = 3
	GossipMessage_CHAN_AND_ORG GossipMessage_Tag = 4
	GossipMessage_CHAN_OR_ORG  GossipMessage_Tag = 5
)

var GossipMessage_Tag_name = map[int32]string{
	0: "UNDEFINED",
	1: "EMPTY",
	2: "ORG_ONLY",
	3: "CHAN_ONLY",
	4: "CHAN_AND_ORG",
	5: "CHAN_OR_ORG",
}
var GossipMessage_Tag_value = map[string]int32{
	"UNDEFINED":    0,
	"EMPTY":        1,
	"ORG_ONLY":     2,
	"CHAN_ONLY":    3,
	"CHAN_AND_ORG": 4,
	"CHAN_OR_ORG":  5,
}

func (x GossipMessage_Tag) String() string {
	return proto1.EnumName(GossipMessage_Tag_name, int32(x))
}
func (GossipMessage_Tag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// GossipMessage defines the message sent in a gossip network
type GossipMessage struct {
	// used mainly for testing, but will might be used in the future
	// for ensuring message delivery by acking
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	// The channel of the message.
	// Some GossipMessages may set this to nil, because
	// they are cross-channels but some may not
	Channel []byte `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// determines to which peers it is allowed
	// to forward the message
	Tag GossipMessage_Tag `protobuf:"varint,3,opt,name=tag,enum=proto.GossipMessage_Tag" json:"tag,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*GossipMessage_AliveMsg
	//	*GossipMessage_MemReq
	//	*GossipMessage_MemRes
	//	*GossipMessage_DataMsg
	//	*GossipMessage_Hello
	//	*GossipMessage_DataDig
	//	*GossipMessage_DataReq
	//	*GossipMessage_DataUpdate
	//	*GossipMessage_Empty
	//	*GossipMessage_Conn
	//	*GossipMessage_StateInfo
	//	*GossipMessage_StateSnapshot
	//	*GossipMessage_StateInfoPullReq
	//	*GossipMessage_StateRequest
	//	*GossipMessage_StateResponse
	//	*GossipMessage_LeadershipMsg
	//	*GossipMessage_PeerIdentity
	Content isGossipMessage_Content `protobuf_oneof:"content"`
}

func (m *GossipMessage) Reset()                    { *m = GossipMessage{} }
func (m *GossipMessage) String() string            { return proto1.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()               {}
func (*GossipMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isGossipMessage_Content interface {
	isGossipMessage_Content()
}

type GossipMessage_AliveMsg struct {
	AliveMsg *AliveMessage `protobuf:"bytes,4,opt,name=aliveMsg,oneof"`
}
type GossipMessage_MemReq struct {
	MemReq *MembershipRequest `protobuf:"bytes,5,opt,name=memReq,oneof"`
}
type GossipMessage_MemRes struct {
	MemRes *MembershipResponse `protobuf:"bytes,6,opt,name=memRes,oneof"`
}
type GossipMessage_DataMsg struct {
	DataMsg *DataMessage `protobuf:"bytes,7,opt,name=dataMsg,oneof"`
}
type GossipMessage_Hello struct {
	Hello *GossipHello `protobuf:"bytes,8,opt,name=hello,oneof"`
}
type GossipMessage_DataDig struct {
	DataDig *DataDigest `protobuf:"bytes,9,opt,name=dataDig,oneof"`
}
type GossipMessage_DataReq struct {
	DataReq *DataRequest `protobuf:"bytes,10,opt,name=dataReq,oneof"`
}
type GossipMessage_DataUpdate struct {
	DataUpdate *DataUpdate `protobuf:"bytes,11,opt,name=dataUpdate,oneof"`
}
type GossipMessage_Empty struct {
	Empty *Empty `protobuf:"bytes,12,opt,name=empty,oneof"`
}
type GossipMessage_Conn struct {
	Conn *ConnEstablish `protobuf:"bytes,13,opt,name=conn,oneof"`
}
type GossipMessage_StateInfo struct {
	StateInfo *StateInfo `protobuf:"bytes,14,opt,name=stateInfo,oneof"`
}
type GossipMessage_StateSnapshot struct {
	StateSnapshot *StateInfoSnapshot `protobuf:"bytes,15,opt,name=stateSnapshot,oneof"`
}
type GossipMessage_StateInfoPullReq struct {
	StateInfoPullReq *StateInfoPullRequest `protobuf:"bytes,16,opt,name=stateInfoPullReq,oneof"`
}
type GossipMessage_StateRequest struct {
	StateRequest *RemoteStateRequest `protobuf:"bytes,17,opt,name=stateRequest,oneof"`
}
type GossipMessage_StateResponse struct {
	StateResponse *RemoteStateResponse `protobuf:"bytes,18,opt,name=stateResponse,oneof"`
}
type GossipMessage_LeadershipMsg struct {
	LeadershipMsg *LeadershipMessage `protobuf:"bytes,19,opt,name=leadershipMsg,oneof"`
}
type GossipMessage_PeerIdentity struct {
	PeerIdentity *PeerIdentity `protobuf:"bytes,20,opt,name=peerIdentity,oneof"`
}

func (*GossipMessage_AliveMsg) isGossipMessage_Content()         {}
func (*GossipMessage_MemReq) isGossipMessage_Content()           {}
func (*GossipMessage_MemRes) isGossipMessage_Content()           {}
func (*GossipMessage_DataMsg) isGossipMessage_Content()          {}
func (*GossipMessage_Hello) isGossipMessage_Content()            {}
func (*GossipMessage_DataDig) isGossipMessage_Content()          {}
func (*GossipMessage_DataReq) isGossipMessage_Content()          {}
func (*GossipMessage_DataUpdate) isGossipMessage_Content()       {}
func (*GossipMessage_Empty) isGossipMessage_Content()            {}
func (*GossipMessage_Conn) isGossipMessage_Content()             {}
func (*GossipMessage_StateInfo) isGossipMessage_Content()        {}
func (*GossipMessage_StateSnapshot) isGossipMessage_Content()    {}
func (*GossipMessage_StateInfoPullReq) isGossipMessage_Content() {}
func (*GossipMessage_StateRequest) isGossipMessage_Content()     {}
func (*GossipMessage_StateResponse) isGossipMessage_Content()    {}
func (*GossipMessage_LeadershipMsg) isGossipMessage_Content()    {}
func (*GossipMessage_PeerIdentity) isGossipMessage_Content()     {}

func (m *GossipMessage) GetContent() isGossipMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *GossipMessage) GetAliveMsg() *AliveMessage {
	if x, ok := m.GetContent().(*GossipMessage_AliveMsg); ok {
		return x.AliveMsg
	}
	return nil
}

func (m *GossipMessage) GetMemReq() *MembershipRequest {
	if x, ok := m.GetContent().(*GossipMessage_MemReq); ok {
		return x.MemReq
	}
	return nil
}

func (m *GossipMessage) GetMemRes() *MembershipResponse {
	if x, ok := m.GetContent().(*GossipMessage_MemRes); ok {
		return x.MemRes
	}
	return nil
}

func (m *GossipMessage) GetDataMsg() *DataMessage {
	if x, ok := m.GetContent().(*GossipMessage_DataMsg); ok {
		return x.DataMsg
	}
	return nil
}

func (m *GossipMessage) GetHello() *GossipHello {
	if x, ok := m.GetContent().(*GossipMessage_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *GossipMessage) GetDataDig() *DataDigest {
	if x, ok := m.GetContent().(*GossipMessage_DataDig); ok {
		return x.DataDig
	}
	return nil
}

func (m *GossipMessage) GetDataReq() *DataRequest {
	if x, ok := m.GetContent().(*GossipMessage_DataReq); ok {
		return x.DataReq
	}
	return nil
}

func (m *GossipMessage) GetDataUpdate() *DataUpdate {
	if x, ok := m.GetContent().(*GossipMessage_DataUpdate); ok {
		return x.DataUpdate
	}
	return nil
}

func (m *GossipMessage) GetEmpty() *Empty {
	if x, ok := m.GetContent().(*GossipMessage_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *GossipMessage) GetConn() *ConnEstablish {
	if x, ok := m.GetContent().(*GossipMessage_Conn); ok {
		return x.Conn
	}
	return nil
}

func (m *GossipMessage) GetStateInfo() *StateInfo {
	if x, ok := m.GetContent().(*GossipMessage_StateInfo); ok {
		return x.StateInfo
	}
	return nil
}

func (m *GossipMessage) GetStateSnapshot() *StateInfoSnapshot {
	if x, ok := m.GetContent().(*GossipMessage_StateSnapshot); ok {
		return x.StateSnapshot
	}
	return nil
}

func (m *GossipMessage) GetStateInfoPullReq() *StateInfoPullRequest {
	if x, ok := m.GetContent().(*GossipMessage_StateInfoPullReq); ok {
		return x.StateInfoPullReq
	}
	return nil
}

func (m *GossipMessage) GetStateRequest() *RemoteStateRequest {
	if x, ok := m.GetContent().(*GossipMessage_StateRequest); ok {
		return x.StateRequest
	}
	return nil
}

func (m *GossipMessage) GetStateResponse() *RemoteStateResponse {
	if x, ok := m.GetContent().(*GossipMessage_StateResponse); ok {
		return x.StateResponse
	}
	return nil
}

func (m *GossipMessage) GetLeadershipMsg() *LeadershipMessage {
	if x, ok := m.GetContent().(*GossipMessage_LeadershipMsg); ok {
		return x.LeadershipMsg
	}
	return nil
}

func (m *GossipMessage) GetPeerIdentity() *PeerIdentity {
	if x, ok := m.GetContent().(*GossipMessage_PeerIdentity); ok {
		return x.PeerIdentity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GossipMessage) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _GossipMessage_OneofMarshaler, _GossipMessage_OneofUnmarshaler, _GossipMessage_OneofSizer, []interface{}{
		(*GossipMessage_AliveMsg)(nil),
		(*GossipMessage_MemReq)(nil),
		(*GossipMessage_MemRes)(nil),
		(*GossipMessage_DataMsg)(nil),
		(*GossipMessage_Hello)(nil),
		(*GossipMessage_DataDig)(nil),
		(*GossipMessage_DataReq)(nil),
		(*GossipMessage_DataUpdate)(nil),
		(*GossipMessage_Empty)(nil),
		(*GossipMessage_Conn)(nil),
		(*GossipMessage_StateInfo)(nil),
		(*GossipMessage_StateSnapshot)(nil),
		(*GossipMessage_StateInfoPullReq)(nil),
		(*GossipMessage_StateRequest)(nil),
		(*GossipMessage_StateResponse)(nil),
		(*GossipMessage_LeadershipMsg)(nil),
		(*GossipMessage_PeerIdentity)(nil),
	}
}

func _GossipMessage_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*GossipMessage)
	// content
	switch x := m.Content.(type) {
	case *GossipMessage_AliveMsg:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.AliveMsg); err != nil {
			return err
		}
	case *GossipMessage_MemReq:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.MemReq); err != nil {
			return err
		}
	case *GossipMessage_MemRes:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.MemRes); err != nil {
			return err
		}
	case *GossipMessage_DataMsg:
		b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.DataMsg); err != nil {
			return err
		}
	case *GossipMessage_Hello:
		b.EncodeVarint(8<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Hello); err != nil {
			return err
		}
	case *GossipMessage_DataDig:
		b.EncodeVarint(9<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.DataDig); err != nil {
			return err
		}
	case *GossipMessage_DataReq:
		b.EncodeVarint(10<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.DataReq); err != nil {
			return err
		}
	case *GossipMessage_DataUpdate:
		b.EncodeVarint(11<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.DataUpdate); err != nil {
			return err
		}
	case *GossipMessage_Empty:
		b.EncodeVarint(12<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *GossipMessage_Conn:
		b.EncodeVarint(13<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Conn); err != nil {
			return err
		}
	case *GossipMessage_StateInfo:
		b.EncodeVarint(14<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.StateInfo); err != nil {
			return err
		}
	case *GossipMessage_StateSnapshot:
		b.EncodeVarint(15<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.StateSnapshot); err != nil {
			return err
		}
	case *GossipMessage_StateInfoPullReq:
		b.EncodeVarint(16<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.StateInfoPullReq); err != nil {
			return err
		}
	case *GossipMessage_StateRequest:
		b.EncodeVarint(17<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.StateRequest); err != nil {
			return err
		}
	case *GossipMessage_StateResponse:
		b.EncodeVarint(18<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.StateResponse); err != nil {
			return err
		}
	case *GossipMessage_LeadershipMsg:
		b.EncodeVarint(19<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.LeadershipMsg); err != nil {
			return err
		}
	case *GossipMessage_PeerIdentity:
		b.EncodeVarint(20<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PeerIdentity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GossipMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _GossipMessage_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*GossipMessage)
	switch tag {
	case 4: // content.aliveMsg
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(AliveMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_AliveMsg{msg}
		return true, err
	case 5: // content.memReq
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(MembershipRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_MemReq{msg}
		return true, err
	case 6: // content.memRes
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(MembershipResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_MemRes{msg}
		return true, err
	case 7: // content.dataMsg
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DataMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataMsg{msg}
		return true, err
	case 8: // content.hello
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GossipHello)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Hello{msg}
		return true, err
	case 9: // content.dataDig
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DataDigest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataDig{msg}
		return true, err
	case 10: // content.dataReq
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DataRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataReq{msg}
		return true, err
	case 11: // content.dataUpdate
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DataUpdate)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataUpdate{msg}
		return true, err
	case 12: // content.empty
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Empty{msg}
		return true, err
	case 13: // content.conn
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(ConnEstablish)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Conn{msg}
		return true, err
	case 14: // content.stateInfo
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StateInfo)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateInfo{msg}
		return true, err
	case 15: // content.stateSnapshot
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StateInfoSnapshot)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateSnapshot{msg}
		return true, err
	case 16: // content.stateInfoPullReq
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StateInfoPullRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateInfoPullReq{msg}
		return true, err
	case 17: // content.stateRequest
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(RemoteStateRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateRequest{msg}
		return true, err
	case 18: // content.stateResponse
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(RemoteStateResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateResponse{msg}
		return true, err
	case 19: // content.leadershipMsg
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LeadershipMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_LeadershipMsg{msg}
		return true, err
	case 20: // content.peerIdentity
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PeerIdentity)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PeerIdentity{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GossipMessage_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*GossipMessage)
	// content
	switch x := m.Content.(type) {
	case *GossipMessage_AliveMsg:
		s := proto1.Size(x.AliveMsg)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_MemReq:
		s := proto1.Size(x.MemReq)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_MemRes:
		s := proto1.Size(x.MemRes)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataMsg:
		s := proto1.Size(x.DataMsg)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Hello:
		s := proto1.Size(x.Hello)
		n += proto1.SizeVarint(8<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataDig:
		s := proto1.Size(x.DataDig)
		n += proto1.SizeVarint(9<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataReq:
		s := proto1.Size(x.DataReq)
		n += proto1.SizeVarint(10<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataUpdate:
		s := proto1.Size(x.DataUpdate)
		n += proto1.SizeVarint(11<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Empty:
		s := proto1.Size(x.Empty)
		n += proto1.SizeVarint(12<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Conn:
		s := proto1.Size(x.Conn)
		n += proto1.SizeVarint(13<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateInfo:
		s := proto1.Size(x.StateInfo)
		n += proto1.SizeVarint(14<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateSnapshot:
		s := proto1.Size(x.StateSnapshot)
		n += proto1.SizeVarint(15<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateInfoPullReq:
		s := proto1.Size(x.StateInfoPullReq)
		n += proto1.SizeVarint(16<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateRequest:
		s := proto1.Size(x.StateRequest)
		n += proto1.SizeVarint(17<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateResponse:
		s := proto1.Size(x.StateResponse)
		n += proto1.SizeVarint(18<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_LeadershipMsg:
		s := proto1.Size(x.LeadershipMsg)
		n += proto1.SizeVarint(19<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PeerIdentity:
		s := proto1.Size(x.PeerIdentity)
		n += proto1.SizeVarint(20<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// StateInfo is used for a peer to relay its state information
// to other peers
type StateInfo struct {
	Metadata  []byte    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Timestamp *PeerTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	PkiID     []byte    `protobuf:"bytes,3,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
	Signature []byte    `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *StateInfo) Reset()                    { *m = StateInfo{} }
func (m *StateInfo) String() string            { return proto1.CompactTextString(m) }
func (*StateInfo) ProtoMessage()               {}
func (*StateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StateInfo) GetTimestamp() *PeerTime {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// StateInfoSnapshot is an aggregation of StateInfo messages
type StateInfoSnapshot struct {
	Elements []*GossipMessage `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (m *StateInfoSnapshot) Reset()                    { *m = StateInfoSnapshot{} }
func (m *StateInfoSnapshot) String() string            { return proto1.CompactTextString(m) }
func (*StateInfoSnapshot) ProtoMessage()               {}
func (*StateInfoSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StateInfoSnapshot) GetElements() []*GossipMessage {
	if m != nil {
		return m.Elements
	}
	return nil
}

// StateInfoPullRequest is used to fetch a StateInfoSnapshot
// from a remote peer
type StateInfoPullRequest struct {
}

func (m *StateInfoPullRequest) Reset()                    { *m = StateInfoPullRequest{} }
func (m *StateInfoPullRequest) String() string            { return proto1.CompactTextString(m) }
func (*StateInfoPullRequest) ProtoMessage()               {}
func (*StateInfoPullRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// ConnEstablish is the message used for the gossip handshake
// Whenever a peer connects to another peer, it handshakes
// with it by sending this message that proves its identity
type ConnEstablish struct {
	Sig   []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	PkiID []byte `protobuf:"bytes,2,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
	Cert  []byte `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *ConnEstablish) Reset()                    { *m = ConnEstablish{} }
func (m *ConnEstablish) String() string            { return proto1.CompactTextString(m) }
func (*ConnEstablish) ProtoMessage()               {}
func (*ConnEstablish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// PeerIdentity defines the identity of the peer
// Used to make other peers learn of the identity
// of a certain peer
type PeerIdentity struct {
	Sig      []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	PkiID    []byte `protobuf:"bytes,2,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
	Cert     []byte `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *PeerIdentity) Reset()                    { *m = PeerIdentity{} }
func (m *PeerIdentity) String() string            { return proto1.CompactTextString(m) }
func (*PeerIdentity) ProtoMessage()               {}
func (*PeerIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// DataRequest is a message used for a peer to request
// certain data blocks from a remote peer
type DataRequest struct {
	Nonce   uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Digests []string    `protobuf:"bytes,2,rep,name=digests" json:"digests,omitempty"`
	MsgType PullMsgType `protobuf:"varint,3,opt,name=msgType,enum=proto.PullMsgType" json:"msgType,omitempty"`
}

func (m *DataRequest) Reset()                    { *m = DataRequest{} }
func (m *DataRequest) String() string            { return proto1.CompactTextString(m) }
func (*DataRequest) ProtoMessage()               {}
func (*DataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// GossipHello is the message that is used for the peer to initiate
// a pull round with another peer
type GossipHello struct {
	Nonce    uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Metadata []byte      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MsgType  PullMsgType `protobuf:"varint,3,opt,name=msgType,enum=proto.PullMsgType" json:"msgType,omitempty"`
}

func (m *GossipHello) Reset()                    { *m = GossipHello{} }
func (m *GossipHello) String() string            { return proto1.CompactTextString(m) }
func (*GossipHello) ProtoMessage()               {}
func (*GossipHello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// DataUpdate is the the final message in the pull phase
// sent from the receiver to the initiator
type DataUpdate struct {
	Nonce   uint64           `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Data    []*GossipMessage `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	MsgType PullMsgType      `protobuf:"varint,3,opt,name=msgType,enum=proto.PullMsgType" json:"msgType,omitempty"`
}

func (m *DataUpdate) Reset()                    { *m = DataUpdate{} }
func (m *DataUpdate) String() string            { return proto1.CompactTextString(m) }
func (*DataUpdate) ProtoMessage()               {}
func (*DataUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DataUpdate) GetData() []*GossipMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

// DataDigest is the message sent from the receiver peer
// to the initator peer and contains the data items it has
type DataDigest struct {
	Nonce   uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Digests []string    `protobuf:"bytes,2,rep,name=digests" json:"digests,omitempty"`
	MsgType PullMsgType `protobuf:"varint,3,opt,name=msgType,enum=proto.PullMsgType" json:"msgType,omitempty"`
}

func (m *DataDigest) Reset()                    { *m = DataDigest{} }
func (m *DataDigest) String() string            { return proto1.CompactTextString(m) }
func (*DataDigest) ProtoMessage()               {}
func (*DataDigest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// DataMessage is the message that contains a block
type DataMessage struct {
	Payload *Payload `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *DataMessage) Reset()                    { *m = DataMessage{} }
func (m *DataMessage) String() string            { return proto1.CompactTextString(m) }
func (*DataMessage) ProtoMessage()               {}
func (*DataMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DataMessage) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Payload contains a block
type Payload struct {
	SeqNum uint64 `protobuf:"varint,1,opt,name=seqNum" json:"seqNum,omitempty"`
	Hash   string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto1.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// AliveMessage is sent to inform remote peers
// of a peer's existence and activity
type AliveMessage struct {
	Membership *Member   `protobuf:"bytes,1,opt,name=membership" json:"membership,omitempty"`
	Timestamp  *PeerTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Signature  []byte    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Identity   []byte    `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *AliveMessage) Reset()                    { *m = AliveMessage{} }
func (m *AliveMessage) String() string            { return proto1.CompactTextString(m) }
func (*AliveMessage) ProtoMessage()               {}
func (*AliveMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AliveMessage) GetMembership() *Member {
	if m != nil {
		return m.Membership
	}
	return nil
}

func (m *AliveMessage) GetTimestamp() *PeerTime {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Leadership Message is sent during leader election to inform
// remote peers about intent of peer to proclaim itself as leader
type LeadershipMessage struct {
	Membership *Member   `protobuf:"bytes,1,opt,name=membership" json:"membership,omitempty"`
	Timestamp  *PeerTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Signature  []byte    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *LeadershipMessage) Reset()                    { *m = LeadershipMessage{} }
func (m *LeadershipMessage) String() string            { return proto1.CompactTextString(m) }
func (*LeadershipMessage) ProtoMessage()               {}
func (*LeadershipMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LeadershipMessage) GetMembership() *Member {
	if m != nil {
		return m.Membership
	}
	return nil
}

func (m *LeadershipMessage) GetTimestamp() *PeerTime {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// PeerTime defines the logical time of a peer's life
type PeerTime struct {
	IncNumber uint64 `protobuf:"varint,1,opt,name=inc_number,json=incNumber" json:"inc_number,omitempty"`
	SeqNum    uint64 `protobuf:"varint,2,opt,name=seqNum" json:"seqNum,omitempty"`
}

func (m *PeerTime) Reset()                    { *m = PeerTime{} }
func (m *PeerTime) String() string            { return proto1.CompactTextString(m) }
func (*PeerTime) ProtoMessage()               {}
func (*PeerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// MembershipRequest is used to ask membership information
// from a remote peer
type MembershipRequest struct {
	SelfInformation *AliveMessage `protobuf:"bytes,1,opt,name=selfInformation" json:"selfInformation,omitempty"`
	Known           [][]byte      `protobuf:"bytes,2,rep,name=known,proto3" json:"known,omitempty"`
}

func (m *MembershipRequest) Reset()                    { *m = MembershipRequest{} }
func (m *MembershipRequest) String() string            { return proto1.CompactTextString(m) }
func (*MembershipRequest) ProtoMessage()               {}
func (*MembershipRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MembershipRequest) GetSelfInformation() *AliveMessage {
	if m != nil {
		return m.SelfInformation
	}
	return nil
}

// MembershipResponse is used for replying to MembershipRequests
type MembershipResponse struct {
	Alive []*AliveMessage `protobuf:"bytes,1,rep,name=alive" json:"alive,omitempty"`
	Dead  []*AliveMessage `protobuf:"bytes,2,rep,name=dead" json:"dead,omitempty"`
}

func (m *MembershipResponse) Reset()                    { *m = MembershipResponse{} }
func (m *MembershipResponse) String() string            { return proto1.CompactTextString(m) }
func (*MembershipResponse) ProtoMessage()               {}
func (*MembershipResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MembershipResponse) GetAlive() []*AliveMessage {
	if m != nil {
		return m.Alive
	}
	return nil
}

func (m *MembershipResponse) GetDead() []*AliveMessage {
	if m != nil {
		return m.Dead
	}
	return nil
}

// Member holds membership-related information
// about a peer
type Member struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PkiID    []byte `protobuf:"bytes,3,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto1.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// Empty is used for pinging and in tests
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

// RemoteStateRequest is used to ask a set of blocks
// from a remote peer
type RemoteStateRequest struct {
	SeqNums []uint64 `protobuf:"varint,1,rep,packed,name=seqNums" json:"seqNums,omitempty"`
}

func (m *RemoteStateRequest) Reset()                    { *m = RemoteStateRequest{} }
func (m *RemoteStateRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoteStateRequest) ProtoMessage()               {}
func (*RemoteStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// RemoteStateResponse is used to send a set of blocks
// to a remote peer
type RemoteStateResponse struct {
	Payloads []*Payload `protobuf:"bytes,1,rep,name=payloads" json:"payloads,omitempty"`
}

func (m *RemoteStateResponse) Reset()                    { *m = RemoteStateResponse{} }
func (m *RemoteStateResponse) String() string            { return proto1.CompactTextString(m) }
func (*RemoteStateResponse) ProtoMessage()               {}
func (*RemoteStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RemoteStateResponse) GetPayloads() []*Payload {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func init() {
	proto1.RegisterType((*GossipMessage)(nil), "proto.GossipMessage")
	proto1.RegisterType((*StateInfo)(nil), "proto.StateInfo")
	proto1.RegisterType((*StateInfoSnapshot)(nil), "proto.StateInfoSnapshot")
	proto1.RegisterType((*StateInfoPullRequest)(nil), "proto.StateInfoPullRequest")
	proto1.RegisterType((*ConnEstablish)(nil), "proto.ConnEstablish")
	proto1.RegisterType((*PeerIdentity)(nil), "proto.PeerIdentity")
	proto1.RegisterType((*DataRequest)(nil), "proto.DataRequest")
	proto1.RegisterType((*GossipHello)(nil), "proto.GossipHello")
	proto1.RegisterType((*DataUpdate)(nil), "proto.DataUpdate")
	proto1.RegisterType((*DataDigest)(nil), "proto.DataDigest")
	proto1.RegisterType((*DataMessage)(nil), "proto.DataMessage")
	proto1.RegisterType((*Payload)(nil), "proto.Payload")
	proto1.RegisterType((*AliveMessage)(nil), "proto.AliveMessage")
	proto1.RegisterType((*LeadershipMessage)(nil), "proto.LeadershipMessage")
	proto1.RegisterType((*PeerTime)(nil), "proto.PeerTime")
	proto1.RegisterType((*MembershipRequest)(nil), "proto.MembershipRequest")
	proto1.RegisterType((*MembershipResponse)(nil), "proto.MembershipResponse")
	proto1.RegisterType((*Member)(nil), "proto.Member")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*RemoteStateRequest)(nil), "proto.RemoteStateRequest")
	proto1.RegisterType((*RemoteStateResponse)(nil), "proto.RemoteStateResponse")
	proto1.RegisterEnum("proto.PullMsgType", PullMsgType_name, PullMsgType_value)
	proto1.RegisterEnum("proto.GossipMessage_Tag", GossipMessage_Tag_name, GossipMessage_Tag_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gossip service

type GossipClient interface {
	// GossipStream is the gRPC stream used for sending and receiving messages
	GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error)
	// Ping is used to probe a remote peer's aliveness
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gossip_serviceDesc.Streams[0], c.cc, "/proto.Gossip/GossipStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipGossipStreamClient{stream}
	return x, nil
}

type Gossip_GossipStreamClient interface {
	Send(*GossipMessage) error
	Recv() (*GossipMessage, error)
	grpc.ClientStream
}

type gossipGossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipGossipStreamClient) Send(m *GossipMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipGossipStreamClient) Recv() (*GossipMessage, error) {
	m := new(GossipMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gossipClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.Gossip/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gossip service

type GossipServer interface {
	// GossipStream is the gRPC stream used for sending and receiving messages
	GossipStream(Gossip_GossipStreamServer) error
	// Ping is used to probe a remote peer's aliveness
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_GossipStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).GossipStream(&gossipGossipStreamServer{stream})
}

type Gossip_GossipStreamServer interface {
	Send(*GossipMessage) error
	Recv() (*GossipMessage, error)
	grpc.ServerStream
}

type gossipGossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipGossipStreamServer) Send(m *GossipMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipGossipStreamServer) Recv() (*GossipMessage, error) {
	m := new(GossipMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gossip_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gossip/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gossip_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GossipStream",
			Handler:       _Gossip_GossipStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x26, 0xf5, 0xb0, 0xc4, 0x11, 0x15, 0xd3, 0x1b, 0x23, 0x60, 0xdd, 0x16, 0x30, 0x88, 0x00,
	0x55, 0x8d, 0x44, 0x4e, 0x95, 0x43, 0xd1, 0x43, 0x91, 0xd8, 0x91, 0x1a, 0x09, 0x8d, 0x14, 0x63,
	0xed, 0x14, 0x48, 0x2f, 0x06, 0x2d, 0xae, 0x29, 0xd6, 0xe4, 0x92, 0xd1, 0xae, 0x5a, 0xb8, 0x3f,
	0xa1, 0x97, 0xfe, 0x8b, 0xfe, 0xc4, 0x9e, 0x8b, 0x7d, 0x90, 0x22, 0x2d, 0xb9, 0x40, 0x5a, 0x14,
	0x3d, 0x91, 0x33, 0xf3, 0xcd, 0x63, 0x67, 0xe7, 0xb1, 0xd0, 0x4d, 0x08, 0x63, 0x7e, 0x48, 0xfa,
	0xd9, 0x32, 0xe5, 0x29, 0x6a, 0xca, 0x8f, 0xf7, 0x67, 0x1b, 0xba, 0xaf, 0x53, 0xc6, 0xa2, 0x6c,
	0xaa, 0xc4, 0x68, 0x1f, 0x9a, 0x34, 0xa5, 0x73, 0xe2, 0x9a, 0x87, 0x66, 0xaf, 0x81, 0x15, 0x81,
	0x5c, 0x68, 0xcd, 0x17, 0x3e, 0xa5, 0x24, 0x76, 0x6b, 0x87, 0x66, 0xcf, 0xc6, 0x39, 0x89, 0x8e,
	0xa0, 0xce, 0xfd, 0xd0, 0xad, 0x1f, 0x9a, 0xbd, 0x07, 0x03, 0x57, 0x59, 0xef, 0x57, 0x4c, 0xf6,
	0x2f, 0xfc, 0x10, 0x0b, 0x10, 0xfa, 0x0a, 0xda, 0x7e, 0x1c, 0xfd, 0x4c, 0xa6, 0x2c, 0x74, 0x1b,
	0x87, 0x66, 0xaf, 0x33, 0x78, 0xa8, 0x15, 0x4e, 0x24, 0x5b, 0xe1, 0xc7, 0x06, 0x2e, 0x60, 0x68,
	0x00, 0x3b, 0x09, 0x49, 0x30, 0xf9, 0xe0, 0x36, 0xa5, 0x42, 0xee, 0x61, 0x4a, 0x92, 0x2b, 0xb2,
	0x64, 0x8b, 0x28, 0xc3, 0xe4, 0xc3, 0x8a, 0x30, 0x3e, 0x36, 0xb0, 0x46, 0xa2, 0xe7, 0x5a, 0x87,
	0xb9, 0x3b, 0x52, 0xe7, 0x93, 0x2d, 0x3a, 0x2c, 0x4b, 0x29, 0x23, 0x85, 0x12, 0x43, 0x7d, 0x68,
	0x05, 0x3e, 0xf7, 0x45, 0x68, 0x2d, 0xa9, 0x85, 0xb4, 0xd6, 0x50, 0x70, 0x8b, 0xc8, 0x72, 0x10,
	0x3a, 0x82, 0xe6, 0x82, 0xc4, 0x71, 0xea, 0xb6, 0x2b, 0x68, 0x75, 0xf2, 0xb1, 0x90, 0x8c, 0x0d,
	0xac, 0x20, 0xe8, 0xa9, 0xb2, 0x3d, 0x8c, 0x42, 0xd7, 0x92, 0xe8, 0xbd, 0x92, 0xed, 0x61, 0x14,
	0xaa, 0xf0, 0x73, 0x4c, 0x1e, 0x8a, 0x38, 0x34, 0x6c, 0x84, 0xb2, 0x3e, 0x6e, 0x0e, 0x42, 0xcf,
	0x01, 0xc4, 0xef, 0xbb, 0x2c, 0xf0, 0x39, 0x71, 0x3b, 0x1b, 0x1e, 0x94, 0x60, 0x6c, 0xe0, 0x12,
	0x0c, 0x3d, 0x86, 0x26, 0x49, 0x32, 0x7e, 0xeb, 0xda, 0x12, 0x6f, 0x6b, 0xfc, 0x48, 0xf0, 0x44,
	0xe4, 0x52, 0x88, 0x8e, 0xa0, 0x31, 0x4f, 0x29, 0x75, 0xbb, 0x12, 0xb4, 0xaf, 0x41, 0xaf, 0x52,
	0x4a, 0x47, 0x8c, 0xfb, 0x57, 0x71, 0xc4, 0x16, 0x63, 0x03, 0x4b, 0x0c, 0x7a, 0x06, 0x16, 0xe3,
	0x3e, 0x27, 0x13, 0x7a, 0x9d, 0xba, 0x0f, 0xa4, 0x82, 0xa3, 0x15, 0xce, 0x73, 0xfe, 0xd8, 0xc0,
	0x6b, 0x10, 0x7a, 0x09, 0x5d, 0x49, 0x9c, 0x53, 0x3f, 0x63, 0x8b, 0x94, 0xbb, 0xbb, 0x95, 0x3b,
	0x2e, 0xb4, 0x72, 0xf9, 0xd8, 0xc0, 0x55, 0x05, 0x34, 0x01, 0xa7, 0x30, 0x77, 0xb6, 0x8a, 0x63,
	0x91, 0x33, 0x47, 0x1a, 0xf9, 0xf4, 0xae, 0x11, 0x2d, 0xd6, 0xc9, 0xdb, 0x50, 0x43, 0x2f, 0xc0,
	0x96, 0x3c, 0x8d, 0x71, 0xf7, 0x2a, 0xb5, 0x83, 0x49, 0x92, 0x72, 0x72, 0x5e, 0x02, 0x8c, 0x0d,
	0x5c, 0x51, 0x40, 0xa7, 0xfa, 0x34, 0x79, 0x71, 0xb9, 0x48, 0x5a, 0x38, 0xd8, 0x66, 0xa1, 0x28,
	0xbf, 0xaa, 0x8a, 0xc8, 0x48, 0x4c, 0xfc, 0x40, 0x55, 0xa9, 0xa8, 0xc5, 0x87, 0x95, 0x8c, 0xbc,
	0x59, 0xcb, 0x8a, 0x8a, 0xac, 0x2a, 0xa0, 0x6f, 0xc0, 0xce, 0x08, 0x59, 0x4e, 0x02, 0x42, 0x79,
	0xc4, 0x6f, 0xdd, 0xfd, 0x4a, 0x9f, 0x9d, 0x95, 0x44, 0xe2, 0x00, 0x65, 0xa8, 0x77, 0x09, 0xf5,
	0x0b, 0x3f, 0x44, 0x5d, 0xb0, 0xde, 0xcd, 0x86, 0xa3, 0xef, 0x26, 0xb3, 0xd1, 0xd0, 0x31, 0x90,
	0x05, 0xcd, 0xd1, 0xf4, 0xec, 0xe2, 0xbd, 0x63, 0x22, 0x1b, 0xda, 0x6f, 0xf1, 0xeb, 0xcb, 0xb7,
	0xb3, 0x37, 0xef, 0x9d, 0x9a, 0xc0, 0xbd, 0x1a, 0x9f, 0xcc, 0x14, 0x59, 0x47, 0x0e, 0xd8, 0x92,
	0x3c, 0x99, 0x0d, 0x2f, 0xdf, 0xe2, 0xd7, 0x4e, 0x03, 0xed, 0x42, 0x47, 0x01, 0xb0, 0x64, 0x34,
	0x4f, 0x2d, 0x68, 0xcd, 0x53, 0xca, 0x09, 0xe5, 0xde, 0x6f, 0x26, 0x58, 0xc5, 0xd5, 0xa0, 0x03,
	0x68, 0x27, 0x84, 0xfb, 0xa2, 0x3c, 0xe5, 0xdc, 0xb1, 0x71, 0x41, 0xa3, 0xa7, 0x60, 0xf1, 0x28,
	0x21, 0x8c, 0xfb, 0x49, 0x26, 0x87, 0x4f, 0x67, 0xb0, 0x5b, 0x3a, 0xcd, 0x45, 0x94, 0x10, 0xbc,
	0x46, 0x88, 0xf9, 0x95, 0xdd, 0x44, 0x93, 0xa1, 0x9c, 0x48, 0x36, 0x56, 0x04, 0xfa, 0x0c, 0x2c,
	0x16, 0x85, 0xd4, 0xe7, 0xab, 0x25, 0x91, 0xa3, 0xc7, 0xc6, 0x6b, 0x86, 0x37, 0x82, 0xbd, 0x8d,
	0x5a, 0x43, 0xcf, 0xa0, 0x4d, 0x62, 0x92, 0x10, 0xca, 0x99, 0x6b, 0x1e, 0xd6, 0x4b, 0xe5, 0x5f,
	0x99, 0x6e, 0xb8, 0x40, 0x79, 0x8f, 0x60, 0x7f, 0x5b, 0xb5, 0x79, 0xdf, 0x43, 0xb7, 0xd2, 0x31,
	0xc8, 0x81, 0x3a, 0x8b, 0x42, 0x7d, 0x52, 0xf1, 0xbb, 0x8e, 0xba, 0x56, 0x8e, 0x1a, 0x41, 0x63,
	0x4e, 0x96, 0x5c, 0x1f, 0x45, 0xfe, 0x7b, 0xd7, 0x60, 0x97, 0x2f, 0xf1, 0xdf, 0xd8, 0xaa, 0xa4,
	0xbd, 0x51, 0x4d, 0xbb, 0x77, 0x03, 0x9d, 0xd2, 0xb8, 0xb9, 0x7f, 0x2d, 0x04, 0x72, 0x7c, 0x31,
	0xb7, 0x76, 0x58, 0xef, 0x59, 0x38, 0x27, 0xd1, 0x13, 0x68, 0x25, 0x2c, 0xbc, 0xb8, 0xcd, 0x88,
	0x5e, 0x0d, 0xf9, 0x0c, 0x13, 0x89, 0x99, 0x2a, 0x09, 0xce, 0x21, 0x5e, 0x02, 0x9d, 0xd2, 0xe0,
	0xbc, 0xc7, 0x59, 0x39, 0xda, 0xda, 0x9d, 0x22, 0xf9, 0x38, 0x77, 0xbf, 0x02, 0xac, 0xe7, 0xe2,
	0x3d, 0xde, 0x7a, 0xd0, 0xd0, 0x9e, 0xee, 0xbf, 0xfa, 0xc6, 0x3f, 0xf0, 0xfd, 0x93, 0xf2, 0xad,
	0xa6, 0xfe, 0x7f, 0x9c, 0xd6, 0xaf, 0xd5, 0x1d, 0xe6, 0xab, 0xbd, 0x07, 0xad, 0xcc, 0xbf, 0x8d,
	0x53, 0x3f, 0x90, 0xee, 0x3a, 0x83, 0x07, 0xb9, 0xb2, 0xe2, 0xe2, 0x5c, 0xec, 0x4d, 0xa0, 0xa5,
	0x79, 0xe8, 0x11, 0xec, 0x30, 0xf2, 0x61, 0xb6, 0x4a, 0x74, 0x88, 0x9a, 0x12, 0xf5, 0xb4, 0xf0,
	0xd9, 0x42, 0xde, 0x84, 0x85, 0xe5, 0xbf, 0xe0, 0xc9, 0x9c, 0xe9, 0x1a, 0x93, 0x75, 0xf4, 0x87,
	0x09, 0x76, 0x79, 0xbb, 0xa3, 0xa7, 0x00, 0x49, 0xb1, 0x88, 0x75, 0x20, 0xdd, 0xca, 0x86, 0xc6,
	0x25, 0xc0, 0xc7, 0xb6, 0x7f, 0xa5, 0xd1, 0xeb, 0x77, 0x1a, 0x5d, 0x94, 0x50, 0x94, 0x0f, 0x46,
	0x5d, 0xf0, 0x39, 0xed, 0xfd, 0x6e, 0xc2, 0xde, 0xc6, 0x7c, 0xfd, 0x3f, 0xa3, 0xf5, 0x4e, 0xa0,
	0x9d, 0x2b, 0xa1, 0xcf, 0x01, 0x22, 0x3a, 0xbf, 0xa4, 0x2b, 0xe1, 0x4a, 0x5f, 0x85, 0x15, 0xd1,
	0xf9, 0x4c, 0x32, 0x4a, 0xb7, 0x54, 0x2b, 0xdf, 0x92, 0xb7, 0x80, 0xbd, 0x8d, 0x97, 0x12, 0xfa,
	0x16, 0x76, 0x19, 0x89, 0xaf, 0xc5, 0x98, 0x5a, 0x26, 0x3e, 0x8f, 0x52, 0xaa, 0x0f, 0xb6, 0xed,
	0x35, 0x86, 0xef, 0x62, 0x45, 0xcd, 0xde, 0xd0, 0xf4, 0x17, 0x2a, 0x6b, 0xd3, 0xc6, 0x8a, 0xf0,
	0x16, 0x80, 0x36, 0xdf, 0x57, 0xe8, 0x4b, 0x68, 0xca, 0xa7, 0x9c, 0x9e, 0xa0, 0x5b, 0x1d, 0x28,
	0x04, 0xfa, 0x02, 0x1a, 0x01, 0xf1, 0x03, 0xdd, 0x70, 0x5b, 0x91, 0x12, 0xe0, 0xfd, 0x00, 0x3b,
	0xca, 0x93, 0xb8, 0x4e, 0x42, 0x83, 0x2c, 0x8d, 0x28, 0x97, 0x27, 0xb0, 0x70, 0x41, 0xff, 0xed,
	0xb4, 0xd8, 0xba, 0x23, 0xbc, 0x16, 0x34, 0xe5, 0xeb, 0xc7, 0xeb, 0x03, 0xda, 0x5c, 0xf7, 0xa2,
	0x29, 0x55, 0x52, 0xd5, 0x3a, 0x68, 0xe0, 0x9c, 0xf4, 0x4e, 0xe0, 0xe1, 0x96, 0xe5, 0x8e, 0x8e,
	0xa0, 0xad, 0xfb, 0x29, 0x5f, 0x20, 0x77, 0xfb, 0xad, 0x90, 0x1f, 0xbd, 0x80, 0x4e, 0xa9, 0x83,
	0xe5, 0x0a, 0xa6, 0x01, 0xb9, 0x8e, 0x28, 0x09, 0x1c, 0x43, 0xac, 0xd6, 0xd3, 0x38, 0x9d, 0xdf,
	0xe8, 0x3c, 0x38, 0xa6, 0x58, 0xad, 0xf9, 0x06, 0x98, 0xb2, 0xd0, 0xa9, 0x0d, 0x32, 0xd8, 0x51,
	0xb3, 0x09, 0xbd, 0x04, 0x5b, 0xfd, 0x9d, 0xf3, 0x25, 0xf1, 0x13, 0xb4, 0x75, 0x74, 0x1d, 0x6c,
	0xe5, 0x7a, 0x46, 0xcf, 0x7c, 0x66, 0xa2, 0xc7, 0xd0, 0x38, 0x8b, 0x68, 0x88, 0x2a, 0x6f, 0xc2,
	0x83, 0x0a, 0xe5, 0x19, 0xa7, 0x4f, 0x7e, 0x3c, 0x0a, 0x23, 0xbe, 0x58, 0x5d, 0xf5, 0xe7, 0x69,
	0x72, 0xbc, 0xb8, 0xcd, 0xc8, 0x32, 0x26, 0x41, 0x48, 0x96, 0xc7, 0xd7, 0xfe, 0xd5, 0x32, 0x9a,
	0x1f, 0x87, 0xd2, 0xf4, 0xb1, 0xd4, 0xba, 0xda, 0x91, 0x9f, 0xe7, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0x51, 0x83, 0xec, 0x87, 0x0c, 0x00, 0x00,
}
